package co.cc.free.dash.javagames.theone15247.TheHungerGames;

public final class Statics {
	public static final short[][][] cornucopia = {
		{	{0, 0, 0, 0, 0, 0, 0, 0, 0, 41, 41},
			{0, 0, 0, 0, 0, 0, 0, 41, 41, 41, 41},
			{0, 0, 0, 0, 41, 41, 41, 41, 41, 41, 41},
			{0, 0, 0, 41, 41, 41, 41, 41, 41, 41, 41},
			{0, 0, 41, 41, 41, 41, 41, 41, 41, 41, 41},
			{0, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41},
			{41, 41, 41, 41, 41, 41, 41, 0, 0, 41, 41},
			{41, 41, 41, 41, 0, 0, 0, 0, 0, 0, 0},
			{41, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
			{41, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}
		},
		{	{0, 0, 0, 0, 0, 0, 0, 0, 0, 41, 41},
			{0, 0, 0, 0, 0, 0, 0, 41, 41, 0, 0},
			{0, 0, 0, 0, 41, 41, 41, 0, 0, 0, 0},
			{0, 0, 0, 41, 0, 0, 0, 0, 0, 0, 0},
			{0, 0, 41, 0, 0, 0, 0, 0, 0, 0, 0},
			{0, 41, 41, 0, 0, 0, 0, 41, 41, 0, 0},
			{41, 41, 41, 0, 41, 41, 41, 0, 0, 41, 41},
			{41, 41, 41, 41, 0, 0, 0, 0, 0, 0, 0},
			{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
			{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}
		},
		{	{0, 0, 0, 0, 0, 0, 0, 0, 0, 41, 41},
			{0, 0, 0, 0, 0, 0, 0, 41, 41, 0, 0},
			{0, 0, 0, 0, 41, 41, 41, 0, 0, 0, 0},
			{0, 0, 0, 41, 0, 0, 0, 0, 0, 0, 0},
			{0, 0, 41, 0, 0, 0, 0, 0, 0, 0, 0},
			{0, 0, 41, 0, 0, 0, 0, 41, 41, 0, 0},
			{0, 0, 41, 0, 41, 41, 41, 0, 0, 41, 41},
			{0, 0, 41, 41, 0, 0, 0, 0, 0, 0, 0},
			{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
			{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}
		},
		{	{0, 0, 0, 0, 0, 0, 0, 0, 0, 41, 41},
			{0, 0, 0, 0, 0, 0, 0, 41, 41, 0, 0},
			{0, 0, 0, 0, 41, 41, 41, 0, 0, 0, 0},
			{0, 0, 0, 41, 0, 0, 0, 0, 0, 0, 0},
			{0, 0, 0, 41, 0, 0, 0, 0, 0, 0, 0},
			{0, 0, 0, 41, 0, 0, 0, 41, 41, 0, 0},
			{0, 0, 0, 41, 41, 41, 41, 0, 0, 41, 41},
			{0, 0, 0, 41, 0, 0, 0, 0, 0, 0, 0},
			{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
			{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}
		},
		{	{0, 0, 0, 0, 0, 0, 0, 0, 0, 41, 41},
			{0, 0, 0, 0, 0, 0, 0, 41, 41, 0, 0},
			{0, 0, 0, 0, 41, 41, 41, 0, 0, 0, 0},
			{0, 0, 0, 0, 41, 41, 41, 0, 0, 0, 0},
			{0, 0, 0, 0, 41, 41, 41, 0, 0, 0, 0},
			{0, 0, 0, 0, 41, 41, 41, 41, 41, 0, 0},
			{0, 0, 0, 0, 41, 41, 41, 0, 0, 41, 41},
			{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
			{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
			{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}
		},
		{	{0, 0, 0, 0, 0, 0, 0, 0, 0, 41, 41},
			{0, 0, 0, 0, 0, 0, 0, 41, 41, 0, 0},
			{0, 0, 0, 0, 0, 0, 0, 41, 41, 0, 0},
			{0, 0, 0, 0, 0, 0, 0, 41, 41, 0, 0},
			{0, 0, 0, 0, 0, 0, 0, 41, 41, 0, 0},
			{0, 0, 0, 0, 0, 0, 0, 41, 41, 0, 0},
			{0, 0, 0, 0, 0, 0, 0, 0, 0, 41, 41},
			{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
			{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
			{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}
		},
		{	{0, 0, 0, 0, 0, 0, 0, 0, 0, 41, 41},
			{0, 0, 0, 0, 0, 0, 0, 0, 0, 41, 41},
			{0, 0, 0, 0, 0, 0, 0, 0, 0, 41, 41},
			{0, 0, 0, 0, 0, 0, 0, 0, 0, 41, 41},
			{0, 0, 0, 0, 0, 0, 0, 0, 0, 41, 41},
			{0, 0, 0, 0, 0, 0, 0, 0, 0, 41, 41},
			{0, 0, 0, 0, 0, 0, 0, 0, 0, 41, 41},
			{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
			{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
			{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}
		}
	};
	
	public static final short[][][] cornucopiaRemove = {
		{	{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
			{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
			{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
			{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
			{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
			{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
			{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
			{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
			{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
			{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}
		},
		{	{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
			{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
			{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
			{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
			{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
			{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
			{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
			{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
			{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
			{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}
		},
		{	{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
			{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
			{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
			{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
			{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
			{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
			{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
			{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
			{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
			{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}
		},
		{	{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
			{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
			{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
			{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
			{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
			{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
			{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
			{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
			{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
			{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}
		},
		{	{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
			{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
			{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
			{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
			{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
			{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
			{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
			{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
			{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
			{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}
		},
		{	{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
			{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
			{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
			{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
			{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
			{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
			{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
			{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
			{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
			{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}
		},
		{	{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
			{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
			{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
			{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
			{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
			{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
			{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
			{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
			{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
			{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}
		}
	};
	
	public static final short[][][] cornuchests = {
		{	{0, 0, 0, 0, 0, 0, 0, 0, 0, -1, -1},
			{0, 0, 0, 0, 0, 0, 0, -1, -1, -1, -1},
			{0, 0, 0, 0, -1, -1, -1, -1, -1, -1, -1},
			{0, 0, 0, -1, -1, -1, -1, -1, -1, -1, -1},
			{0, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1},
			{0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
			{-1, -1, -1, -1, -1, -1, -1, 0, 0, -1, -1},
			{-1, -1, -1, -1, 0, 0, 0, 0, 0, 0, 0},
			{-1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
			{-1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}
		},
		{	{0, 0, 0, 0, 0, 0, 0, 0, 0, -1, -1},
			{0, 0, 0, 0, 0, 0, 0, -1, -1, 0, 54},
			{0, 0, 0, 0, -1, -1, -1, 54, 0, 0, 0},
			{0, 0, 0, -1, 54, 0, 0, 0, 0, 0, 0},
			{0, 0, -1, 54, 0, 0, 0, 0, 0, 0, 0},
			{0, -1, -1, 0, 0, 0, 54, -1, -1, 0, 54},
			{-1, -1, -1, 54, -1, -1, -1, 0, 0, -1, -1},
			{-1, -1, -1, -1, 0, 0, 0, 0, 0, 0, 0},
			{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
			{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}
		}
	};
	
	public static final short[][][] underground = {
		{
			{98, 98, 98, 98, 98},
			{98, 98, 98, 98, 98},
			{98, 98, 98, 98, 98},
			{98, 98, 98, 98, 98},
			{98, 98, 98, 98, 98}
		},
		{
			{98, 98, 98, 98, 98},
			{98, 98, 98, 98, 98},
			{98, 0, 0, 0, 20},
			{98, 0, 0, 98, 29},
			{98, 98, 98, 98, 98}
		},
		{
			{98, 98, 98, 98, 98},
			{98, 98, 98, 98, 98},
			{98, 0, 0, 0, 20},
			{98, 0, 0, 98, 29},
			{98, 98, 98, 98, 98}
		},
		{
			{98, 98, 98, 98, 98},
			{98, 98, 98, 98, 98},
			{98, 0, 0, 98, 98},
			{98, 0, 0, 98, 98},
			{98, 98, 98, 98, 98}
		},
		{
			{98, 98, 98, 98, 98},
			{98, 98, 98, 98, 98},
			{98, 0, 0, 98, 98},
			{98, 0, 0, 98, 98},
			{98, 98, 98, 98, 98}
		},
		{
			{-1, -1, -1, -1, -1},
			{98, 98, 98, 98, -1},
			{98, 0, 0, 98, -1},
			{98, 0, 0, 98, -1},
			{98, 98, 98, 98, -1}
		},
		{
			{0, 0, 0, 0, 0},
			{70, 70, 70, 70, 0},
			{70, 0, 0, 70, 0},
			{70, 0, 0, 70, 0},
			{70, 70, 70, 70, 0}
		},
		{
			{0, 0, 0, 0, 0},
			{0, 0, 0, 0, 0},
			{0, 0, 0, 0, 0},
			{0, 0, 0, 0, 0},
			{0, 0, 0, 0, 0}
		},
		{
			{0, 0, 0, 0, 0},
			{0, 0, 0, 0, 0},
			{0, 0, 0, 0, 0},
			{0, 0, 0, 0, 0},
			{0, 0, 0, 0, 0}
		}
	};
	
	static short[][][] RotateMap(short[][][] map, int amount) {
		if (amount == 0) return map;
		short[][][] ret = new short[map.length][map[0].length][map[0][0].length];
		
		amount %= 4; // any more than 3 times is a full circle
		for (int i=0; i<amount; i++) { // do amount of times (90 degrees)
			for (int j=0; j < map.length; j++) { // for each floor
				ret[j] = RotateFloor(map[j]);
			}
		}
		return ret;
	}
	
	
	static short[][] RotateFloor(short[][] floor) {
		int x = floor.length;
		int z = floor[0].length; // in minecraft z = y (depth)
		
		// create temp to rotate
		short[][] temp = new short[x][z];
		for(int i=0; i < floor.length; i++) {
			System.arraycopy(floor[i], 0, temp[i], 0, floor[i].length);
		}
		// return array, height and depth are switched because dimentions need to be
	    short[][] ret = new short[z][x];

	    // rotate
	    for(int i=0; i < temp[0].length; i++){
	        for(int j=temp.length-1; j >= 0; j--){
	            ret[i][j] = temp[j][i];
	        }
	    }

	    return ret;
	}
	
	static short[][][][] undergrounds = new short[][][][] {
		RotateMap(underground, 3), underground, RotateMap(underground, 2)
	};
}
